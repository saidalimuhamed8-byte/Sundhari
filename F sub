import sqlite3
from telegram import Update
from telegram.ext import ContextTypes

DB_FILE = "bot_data.db"

# ---------- DB Helper ----------
def init_fsub_db():
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("""
        CREATE TABLE IF NOT EXISTS fsub_channel (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER
        )
    """)
    conn.commit()
    conn.close()

def set_fsub_channel(chat_id: int):
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("DELETE FROM fsub_channel")  # only one channel at a time
    cur.execute("INSERT INTO fsub_channel (chat_id) VALUES (?)", (chat_id,))
    conn.commit()
    conn.close()

def get_fsub_channel() -> int:
    conn = sqlite3.connect(DB_FILE)
    cur = conn.cursor()
    cur.execute("SELECT chat_id FROM fsub_channel LIMIT 1")
    row = cur.fetchone()
    conn.close()
    if row:
        return row[0]
    return None

# ---------- Command Handler ----------
async def fsub_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    ADMIN_IDS = [8301447343]  # replace with your admin IDs
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("⛔ Not authorized")
        return
    if len(context.args) != 1:
        await update.message.reply_text("Usage: /fsub <channel_id>")
        return
    try:
        channel_id = int(context.args[0])
        set_fsub_channel(channel_id)
        await update.message.reply_text(f"✅ Force sub channel set to `{channel_id}`", parse_mode="Markdown")
    except Exception as e:
        await update.message.reply_text(f"❌ Error: {e}")
